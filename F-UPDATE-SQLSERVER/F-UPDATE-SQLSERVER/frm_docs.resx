<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>El tipo de archivo que tiene que abrir es un CSV delimitado por punto y coma
una vez hecho eso, puede conectarse a una base de datos de SQL-SERVER
dando click en el menú de archivo y luego en conectarse a una base de datos

Luego puede escribir un script SQL que se ejecutará por cada fila en el archivo
CSV de la siguiente manera.

Ejemplo:
update paises set descripcion = '[nombre]' where id = [codigo_pais]

El programa ejecutará está sentencia SQL por cada fila, los nombres
en los corchetes son las cabeceras que trae el archivo CSV, el archivo
siempre tiene que traer cabeceras así para identificar dentro de los
corchetes que columna va ir a reemplazar, en este ejemplo vemos
[nombre] por la razón que en el archivo CSV su titulo ó cabecera de
columna es nombre, por lo tanto reemplazará lo que hay en cada fila
de la columna nombre.</value>
  </data>
  <metadata name="contextMenuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="copiarURLToolStripMenuItem.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29m
        dHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJnSURBVDhPddLNT9NwHAbwHtX4J+mFiK+JMYwNb56M
        MVEvusMSX9C5sSsSOanx7MVEuSBGgwy7tB1sghIofCVjsBdexlY2XNv18WmNFy2HJ78m6/fZ9/dJlXMJ
        9U00bcwNZQyJZXQzljHMoRHdvJLUCn2J7J1TN94dA6AcFWUwpRX4YNasntSZasuVjYYtlZYtmam6RFPz
        L07fnDjx7+DfKLG0vrLb9mRWXFHXHfmy2pWJhbZYXU+yJVvGpnfk/IOZ4bBhP0o0rZv7HU/yJVfyG67k
        ftrycflQ1mpt2bZssX45cv15fjVs2E9Q0Dz05NumK8WyK0bJkexaV17O1DH+eQvPpspBbr0utm+/KnSu
        jRsrtHlIm+NBwSALWoeQ7xUvSHGzJ9q6LeOfNuHxDdqANqANaAPagDagzXvanFQiKV4hKID8qPRkcasn
        BW4yxn+lDWgD2oA2oA1oA9qANqDNmDLwVOMVIMs1iFn/cy6xzF+bNqANaAPagDagDWgD2iCS1DxlIGmY
        e20ntIA2oA1oA9qANpha6uBt0UKZ17k6YnhK5Mm8VJqN/wpGWUAb0CUIbUAbZKUbbFJp9TDkF1y+n1vY
        sVypNvnx7NtSazpSbzky+oFXCAoA2oA2oA30Dd/DRtXyEEuz4GJCnbyUyM31x3Nr/XF1kSejLtKGVwC4
        EbhZcHIzXgnQSwh+i6Z0L/Tj8EMbhzZHFjQ6DqJJbhA27Ic2oM2RBdVWA7HHc+HDfi4k1F3agDagDWgD
        2gTZZvYOehgc1rqhw3767s5O98e/btHEo4nFk/FP1Tobzx2cuTdbjTzSmr8B1uo6cuIIh6sAAAAASUVO
        RK5CYII=
</value>
  </data>
  <data name="btnEjecutar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        Qk02BAAAAAAAADYAAAAoAAAAEAAAABAAAAABACAAAAAAAAAAAADEDgAAxA4AAAAAAAAAAAAA////AP//
        /wD///8A////AP///wD///8A////AP///wD///8AHWObFhlgmDkUXZViEFqSiA1YkKQTXJL8DFeP7ZmZ
        mf9xcXH/VFRU/1FRUf9PT0//TExM/0pKSv9HR0f/RUVF/yVnnf8ydKj/PXyv/0eEtf9Oirr/Pn6t/wxX
        j+r///8A////AFhYWP+ioqL/oqKi/6Ojo/+kpKT/pKSk/6Wlpf8vb6X/eKvS/3ir0/9zp9H/aaDN/0B/
        rv8PWZHq////AP///wBcXFz/oKCg/zxzQP+ioqL/o6Oj/6Ojo/+kpKT/NnSq/32v1P9bmsn/VJXH/1iW
        yP9BgK7/E1yU6v///wD///8AYGBg/zp3P/89dkH/oaGh/6Kiov+ioqL/o6Oj/z15sP+Cs9f/Yp/M/1qa
        yf9em8r/Q4Gv/xlgmOr///8A////ADl2Pv9NlVT/SZFQ/yhuLf8mair/I2Yn/yFjJf9FfrT/iLfZ/2ej
        z/9hnsz/Y5/M/0WDsf8fZJzq////ADiDP9RWnV3/gMaI/3vDg/93wX//cr55/2+8df8kZyj/TIS6/427
        2/9uqNH/ZqbR/1+03/9HhbH/JWmh6j6LRqFepWb/i8yU/33Fhv9zwHz/br13/2m7cf91v3z/J2ws/1SJ
        v/+Uv93/da3U/2O44f9L1P//Qou4/yxupur///8AP4xH0l+mZ/+NzZb/icuS/4TIjf+Axoj/e8OD/ypw
        MP9ajsT/mMPg/3yz1/90r9b/XsTt/0uIs/80c6vq////AP///wBHiU//YKdp/12kZf83gj7/NH47/zF5
        N/8udTT/YJLJ/57H4v+DuNr/fbTX/36z1/9PibT/O3mx6v///wD///8Ad3d3/02QVP89ikX/m5ub/5yc
        nP+dnZ3/nZ2d/2aWzP+iy+P/ib3c/4O52v+Eudr/UYu1/0N+tur///8A////AHp6ev+YmZj/UpFZ/5qa
        mv+bm5v/nJyc/5ycnP9smtD/p87l/4/B3/+Jvdz/i73c/1ONtv9LhLzq////AP///wB9fX3/mZmZ/5mZ
        mf+ampr/mpqa/5ubm/+bm5v/b53T/6rR5/+r0ef/mMfh/5HC3v9Wj7f/UonB6v///wD///8AgICA/35+
        fv98fHz/enp6/3d3d/91dXX/cnJy/3Ge1P9vntb/h7Lc/6vT6P+p0Ob/WJC4/1mOxur///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AHCe1tttnNT/hbHa/1qRuf9gk8vq////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AG2c1IlqmtL7ZpfP7g==
</value>
  </data>
</root>